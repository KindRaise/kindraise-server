const npoModel=require("../model/npoModel")
const userModel=require("../model/userModel")



exports.createNpo=async(req,res)=>{
    try {
        const {name, registrationNumber,contactInfo,description}=req.body
        if(!name ||!registrationNumber ||!contactInfo ||!description){
            return res.status(400).json({message:`dear valid NPO,kindly fill all (name, registrationNumber,contactInfo,description) info correctly`})
        }
        const existingNpo= await npoModel.findOne({registrationNumber})
        if(existingNpo){
            return res.status(401).json({message:`dear valid NPO,you are not authorized to use this registrationNumber`})
        }
        const userId=req.user.id
        const user=await userModel.findById(userId)
         if(!user){
            return res.status(400).json({info:`user with id not found`})
         }
         const newNpo= new npoModel({
            name, 
            registrationNumber,
            contactInfo,
            description,
            user:user._id
         })
         await newNpo.save()
         res.status(200).json({message:`npo successfully created by ${user.firstName} ${user.lastName}`,
            data:newNpo
         })
    } catch (error) {
        console.log("error creating Npo:",error)
        return res.status(500).json({info:`can not create npo because
            `,error:error.message})
    }
}

exports.verifyNpo=async(req,res)=>{
    try {
        const npoId=req.params.npoId
        const npo=await npoModel.findById(npoId)
        console.log(npo)
        if(!npo){
            return res.status(400).json({message:`npo not found`})
        }
        isVerified=true
        await npo.save()
        res.status(200).json({message:`successfully verified npo`
         })
    } catch (error) {
        console.log("error verifying Npo:",error)
        return res.status(500).json({info:`can not verify npo because
            `,error:error.message})
    }
}

const mongoose=require("mongoose")   

const npoSchema= new mongoose.Schema({
  name:{type:String, 
    required:true},

      description:{type:String,
        required:true},
      
    registrationNumber:{type:String,
      required:true,
      unique:true},

    contactInfo:{type:String,
      required:true},

    isVerified:{type:Boolean,
      default:false},
   user:{type:mongoose.Schema.Types.ObjectId,
    ref:"user"}
   
 },{timestamps:true})

 const npoModel=mongoose.model("npo",npoSchema)
 

 module.exports=npoModel


 const express=require("express")
 const router=express.Router()
 const{ createNpo ,verifyNpo}=require("../controller/npoController")
 const { authenticateNpo, authenticate, authenticateAdmin }=require("../middleware/auth")
 router.post("/npo-organization",authenticate,authenticateNpo,createNpo)
 router.get("/npo-verification/:npoId",authenticate, authenticateAdmin,verifyNpo)
 module.exports=router
//  firstName: joiValidator.string()
//  .min(3)
//  .required()
//  .pattern(/^[^\s].*[^\s]$/) // Ensures no leading or trailing spaces
//  .pattern(/^[A-Za-z]+(?: [A-Za-z]+)*$/) // Ensures only alphabetic characters and allows spaces within
//  .messages({
//    'string.pattern.base': 'First name must not start or end with  spaces and should contain only letters.',
//    'string.min': 'First name must be at least 3 characters long.',
//  }),
//      lastName: joiValidator
//      .string()
//      .regex(/^\S.*\S$/) // Ensures no leading or trailing spaces
//      .required()
//      .messages({
//        "string.pattern.base": "Last name cannot have leading or trailing spaces.",
//      }),  
   
 















